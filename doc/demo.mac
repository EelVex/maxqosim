/*** 
* Quantum Harmonic Oscillator with dissipation
* */

load("maxqosim.mac")$

n: 2$
𝓢: [n, 2]$ /* Hilbert space n ⊗ 2 */
hbar: 1$

/* Hamiltonian for Quantum Oscillator */
/* α is by default an annihilation operator but we can declare it such:
boperator(α, 1);
for an operator belonging to space with index 1.
*/
H0: hbar * ω['c] * (α†.α);
H1: hbar * ω['a] * σ['z]/2;
Hint: hbar*Ω(t)/2*((α ⊗ σ['plus]) + (α† ⊗ σ['minus]));

H: H0 + H1 + Hint;

/* Define the Lindblad operators and parameters */
𝓕[1]: 𝕳(α, 𝓢, [1]); 	γ[1]: g/2*(n + 1);
𝓕[2]: 𝕳(α†, 𝓢, [1]);	γ[2]: g/2*n;

/* Perform calculations, simplifications, approximation, etc */
/* ... as needed */

/* Convert to matrix form */
Hm: 𝕳(H0, 𝓢, [1]) + 𝕳(H1, 𝓢, [2]) + 𝕳(Hint, 𝓢, [1,2]);

/* Store parameters */
save_parameter([ω['c], 0.25, "Hz"], [ω['a], 0.25, "Hz"], [Ω[0], 1, "meV"]);
save_parameter(['t[0], 0], ['t['fin], 1], ['t['p], 0.5]);
save_parameter([g, 0.1]);

/* Store functions */
save_function(["Ω(t)", Ω[0]*exp(t-'t['p])]);

/* Return list of system of equations */
eq: 𝓛(ρ, Hm, 𝓕, γ)$
eq[1];

/* Solve the lindblad master equation using maxima methods */
[times, rhos]: lindblad_solve(Hm, 𝓕, γ, rho_init(1, apply("*",𝓢)), 't[0], 't['fin], 1e-4)$
time(%);
plot_rho(times, rhos, [1,1], [3,3]);

/* Export and solve the lindblad master equation using a Fortran template */
lindblad_fortran(Hm, 𝓕, γ, rho_init(1, apply("*",𝓢)), 't[0], 't['fin], 1e-5, 100, "results.dat");
time(%);
[times, rhos]: read_results("f90_template/results.dat")$
plot_rho(times, rhos, [1,1], [3,3]);

/* Export definitions for use in latex */
load("totex.mac")$
tex_export("doc/definitions.tex", "Hamiltonian", H, "hint", Hint, "eqs", eq[1]);
tex_export_params("doc/parameters.tex");
